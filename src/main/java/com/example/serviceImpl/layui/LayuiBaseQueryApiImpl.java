package com.example.serviceImpl.layui;


import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.example.bean.UserInfoListVo;
import com.example.bean.basic.LayuiPageQueryResult;
import com.example.bean.basic.MessageResult;
import com.example.bean.exampleBean.LayUIMenu;
import com.example.bean.exampleBean.LayUIMenuExample;
import com.example.bean.exampleBean.UserInfo;
import com.example.bean.exampleBean.UserInfoExample;
import com.example.mapperInterface.MenuMapper;
import com.example.mapperInterface.autoGeneratedMapperInteger.LayUIMenuMapper;
import com.example.mapperInterface.autoGeneratedMapperInteger.UserInfoMapper;
import com.example.service.layui.LayuiBaseQueryApi;
import com.example.untils.DateTimeUtils;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import javax.annotation.Resource;
import javax.mail.internet.MimeMessage;
import java.util.List;
@Service
public class LayuiBaseQueryApiImpl implements LayuiBaseQueryApi {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Resource
    private UserInfoMapper userInfoMapper;
    @Resource
    private MenuMapper menuMapper;
    //MenuMapper

    @Resource
    private LayUIMenuMapper layUIMenuMapper;

    @Autowired
    private JavaMailSender mailSender;

    @Value("${mail.fromMail.addr}")
    private String from;

    @Autowired
    private JavaMailSender javaMailSender;



    @Override
    public LayuiPageQueryResult<UserInfo> layuiQueryUserInfo(UserInfoListVo params) {

        LayuiPageQueryResult<UserInfo> pageQueryResult = new LayuiPageQueryResult<UserInfo>();


        //总数
        UserInfoExample ue = new UserInfoExample();
        UserInfoExample.Criteria criteria = ue.createCriteria();
        if(null!=params.getUserId()){
            criteria.andUserIdEqualTo(params.getUserId());
        }
        if(StringUtils.hasText(params.getUserName())){
            criteria.andUserNameLike("%"+params.getUserName()+"%");
        }
        //大于等于
        if(StringUtils.hasText(params.getRegisterStart())){
            criteria.andCreatDateGreaterThanOrEqualTo(DateTimeUtils.parseStr(params.getRegisterStart(),DateTimeUtils.YYYY_MM_DD));
        }
        if(StringUtils.hasText(params.getRegisterEnd())){
            criteria.andCreatDateLessThanOrEqualTo(DateTimeUtils.parseStr(params.getRegisterEnd(),DateTimeUtils.YYYY_MM_DD));
        }
        if(null!=params.getIsUse()){
            criteria.andIsUseEqualTo(params.getIsUse());
        }


        int count = userInfoMapper.countByExample(ue);
        pageQueryResult.setCount(count);
        // 分页数据
        RowBounds rowBounds = new RowBounds((params.getPage() - 1) * params.getLimit(), params.getLimit());
        List<UserInfo> userInfos = userInfoMapper.selectByExampleWithRowbounds(ue, rowBounds);

        pageQueryResult.setData(userInfos);

        return pageQueryResult;
    }

    /**
     * 行编辑修改更新
     * @param userInfo
     * @return
     */
    @Override
    public MessageResult layuiuUpdateUserInfo(UserInfoListVo userInfo) {
        MessageResult result = new MessageResult();
        //用户名重复提示
        UserInfo ui = new UserInfo();
        ui.setUserName(userInfo.getUserName());

        UserInfoExample uie = new UserInfoExample();
        uie.createCriteria().andUserNameEqualTo(userInfo.getUserName());

        List<UserInfo> userInfoList = userInfoMapper.selectByExample(uie);
        if(userInfoList.isEmpty()){
            //修改的用户名不存在同名
            //进行更新

            UserInfoExample uieex = new UserInfoExample();
            uieex.createCriteria().andUserIdEqualTo(userInfo.getUserId());

            int i = userInfoMapper.updateByExampleSelective(ui, uieex);
           // if (1==i){
                result.setMessage("用户名修改完成！");
           // }

            return result;
        }else {
            result.setMessage("用户名重复！");
            result.setResult(false);
            return result;
        }
    }

    @Override
    public MessageResult ftpDowmLoad() {
        MessageResult result = new MessageResult();

//        FtpUtil.downloadFtpFile("192.168.110.124",null,null,
//                21,"downLoad","C:\\tmp","11.txt");



//        boolean downLoad = FtpUtil.downFile("192.168.110.124", 21,
//                null, null,
//                "downLoad", "11.txt",
//                "C:\\tmp");
//        if(downLoad){
//            result.setMessage("下载成功！");
//        }else {
//            result.setResult(false);
//            result.setMessage("下载失败！");
//        }
        return result;
    }

    /**
     * 发送邮件
     * @return
     */
    @Override
    public MessageResult sendMail() {
        MessageResult result = new MessageResult();
        try {
//            MimeMessage mimeMessage = mailSender.createMimeMessage();
//            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);
//            //发件人
//            helper.setFrom("chengliudegg@163.com");
//            //收件人
//            helper.setTo("chengliudegg@163.com");
//            //标题
//            helper.setSubject("subject");
//            //文本
//            helper.setText("message text");
//            //附件
////            mailSender.send(mimeMessage);
//
//
////            mailSender.send(message);
//            result.setMessage("简单邮件已经发送");
//            logger.info("简单邮件已经发送。");


            MessageResult messageResult = new MessageResult();

            MimeMessage mMessage=javaMailSender.createMimeMessage();//创建邮件对象
            MimeMessageHelper mMessageHelper;
            String from;
            try {
                //从配置文件中拿到发件人邮箱地址
                mMessageHelper=new MimeMessageHelper(mMessage,true);
//                String property = PropertyUtils.getProperty("mail.smtp.username");
                mMessageHelper.setFrom("335252661@qq.com");//发件人邮箱

                mMessageHelper.setTo("chengliudegg.@163.com");//收件人邮箱
                mMessageHelper.setSubject("会议安排");//邮件的主题
                mMessageHelper.setText("<p>Spring邮件测试</p><br/>" +
                        "我是测试邮件！",true);//邮件的文本内容，true表示文本以html格式打开
//            File file=new File("C:\\tmp\\ppp.jpg");//在邮件中添加一张图片
//            FileSystemResource resource=new FileSystemResource(file);
//            mMessageHelper.addInline("fengye", resource);//这里指定一个id,在上面引用
//            mMessageHelper.addAttachment("枫叶.png", resource);//在邮件中添加一个附件
                javaMailSender.send(mMessage);//发送邮件

                messageResult.setMessage("发送成功！");
                messageResult.setResult(true);
            } catch (Exception e) {
                messageResult.setResult(false);
                messageResult.setMessage("发送失败！");
                e.printStackTrace();
            }


        } catch (Exception e) {
            result.setResult(false);
            result.setMessage("发送简单邮件时发生异常");
            logger.error("发送简单邮件时发生异常！", e);
        }







        return result;
    }

    /**
     * 菜单初始化
     * @return
     */
    @Override
    public MessageResult selectAllMenu() {
        MessageResult result = new MessageResult();

        JSONArray jsonArray = new JSONArray();


        LayUIMenuExample example = new LayUIMenuExample();
        LayUIMenuExample.Criteria criteria = example.createCriteria();




        criteria.andLevelEqualTo("1");
        List<LayUIMenu> layUIMenus = layUIMenuMapper.selectByExample(example);
        for(LayUIMenu vo :layUIMenus){

            JSONObject jsonMENU1 = new JSONObject();
            JSONArray arrChild = new JSONArray();
            jsonMENU1.put("id",vo.getMenuId());
            jsonMENU1.put("text",vo.getText());
            jsonMENU1.put("children",arrChild);



            Integer menuId = vo.getMenuId();
            LayUIMenuExample example2 = new LayUIMenuExample();
           example2.createCriteria().andFatherMenuIdEqualTo(menuId);
            List<LayUIMenu> menuLevel2 = layUIMenuMapper.selectByExample(example2);
            for(LayUIMenu vo2 : menuLevel2){
                JSONObject jsonMENU2 = new JSONObject();
                jsonMENU2.put("id",vo2.getMenuId());
                jsonMENU2.put("text",vo2.getText());
                jsonMENU2.put("url",vo2.getURL());

                arrChild.add(jsonMENU2);

            }

            jsonArray.add(jsonMENU1);

        }


        result.setData(jsonArray);
        return result;
    }

    @Override
    public MessageResult addMenu(String addMenu1, String addMenu2, String menuName
    ,String menuUrl) {
        if(addMenu1.equals("001")){
            //表示添加一级菜单
            int id = menuMapper.queryNextMenuId();
            LayUIMenu layUIMenu = new LayUIMenu();
            layUIMenu.setMenuId(id);
            layUIMenu.setLevel("1");
            layUIMenu.setText(menuName);
            layUIMenuMapper.insert(layUIMenu);

        }else if(addMenu1.equals("002")){
            //表示添加二级菜单
            LayUIMenu layUIMenu = new LayUIMenu();


            int id = menuMapper.queryNextMenuIdByFatherId(addMenu2);
            layUIMenu.setMenuId(id);
            layUIMenu.setLevel("2");
            layUIMenu.setText(menuName);
            layUIMenu.setFatherMenuId(Integer.parseInt(addMenu2));
            layUIMenuMapper.insert(layUIMenu);
        }
        return new MessageResult();
    }
}
